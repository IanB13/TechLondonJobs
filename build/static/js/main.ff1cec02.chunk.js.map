{"version":3,"sources":["services/APIRequest.js","components/IndividualLink.jsx","components/LinkList.jsx","components/Summary.jsx","App.js","index.js"],"names":["getJobLinks","a","axios","get","jobLinks","data","IndividaulLink","link","icon","linkType","List","Item","style","Icon","name","Content","jobTitle","href","url","jobID","LinkList","links","Links","h2style","length","className","map","key","_id","Summary","totalJobs","App","useState","loading","changeJobLinks","useEffect","APIRequests","then","liveLinks","filter","deadLink","deadLinks","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAMA,IAKe,GACXA,YANa,uCAAG,4BAAAC,EAAA,sEACOC,IAAMC,IAAN,UANd,OAMc,cADP,cACVC,EADU,yBAETA,EAASC,MAFA,2CAAH,sD,yBCyBFC,EA5BQ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KACjBC,EAAO,KAEX,OAHwC,EAAdC,UAItB,IAAK,OACDD,EAAO,uBACP,MAEJ,QACIA,EAAO,uBAIf,OACI,kBAACE,EAAA,EAAKC,KAAN,CAAWC,MAAS,CAAC,WAAc,UACnC,kBAACF,EAAA,EAAKG,KAAN,CAAWC,KAAMN,IACjB,kBAACE,EAAA,EAAKK,QAAN,CAAcH,MAAS,CAAC,WAAc,UACtC,iCACI,iCAAUL,EAAKS,UACf,uBAAGC,KAAMV,EAAKW,KAAd,wBAFJ,IAEgD,6BAC5C,uBAAGD,KAAI,6CAAwCV,EAAKY,QAApD,oCCeGC,EAlCE,SAAC,GAAgC,IAAvBC,EAAsB,EAA7BC,MAAcb,EAAe,EAAfA,SAC1Bc,EAAU,KAEd,OAAQd,GACJ,IAAK,OACDc,EAAU,CAAE,YAAe,SAC3B,MAEJ,QACIA,EAAU,CAAE,YAAe,OAInC,OAAuB,IAAjBF,EAAMG,OAEJ,oCACI,wBAAIZ,MAAOW,GAAUd,EAArB,cACA,uBAAGgB,UAAW,WAAd,eAAqCJ,EAAMG,QAC3C,kBAACd,EAAA,EAAD,KACKW,EAAMK,KAAI,SAAAnB,GAAI,OAAI,kBAAC,EAAD,CAAgBA,KAAMA,EAAME,SAAUA,EAAUkB,IAAKpB,EAAKqB,WAOzF,6BACI,wBAAIhB,MAAOW,GAAUd,EAArB,cACA,6CCfGoB,EAhBC,SAAC,GAAgB,IAAfC,EAAc,EAAdA,UAEd,OACI,yBAAKL,UAAW,WACZ,uDACA,uBAAGA,UAAW,WAAd,eAAmD,IAAZK,EAAe,aAAaA,GAFvE,6CAI8C,uBAAGb,KAAK,sCAAR,eAJ9C,oLAMmB,iDANnB,4DAOuB,uBAAGA,KAAO,4CAAV,QAPvB,MC+BOc,MA5Bf,WAAgB,IAAD,EACsBC,mBAAS,CAAC,CAACC,SAAQ,KADzC,mBACN7B,EADM,KACI8B,EADJ,KAGbC,qBAAU,WACRC,EAAYpC,cAAcqC,MAAK,SAAAhB,GAC7Ba,EAAeb,QAEhB,IAEH,IAAMiB,EAAYlC,EAASmC,QAAO,SAAAhC,GAAI,OAAsB,IAAlBA,EAAKiC,YACzCC,EAAYrC,EAASmC,QAAO,SAAAhC,GAAI,OAAsB,IAAlBA,EAAKiC,YACzCV,EAAY1B,EAASoB,OAE3B,OACE,yBAAKC,UAAU,iBACX,kBAAC,EAAD,CAASK,UAAaA,IACxB,6BACE,kBAAC,EAAD,CAAUR,MAAQgB,EAAW7B,SAAU,UAEzC,6BACE,kBAAC,EAAD,CAAUa,MAASmB,EAAWhC,SAAW,YCvBjDiC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ff1cec02.chunk.js","sourcesContent":["import axios from 'axios';\r\nlet baseURL =\"/api\"\r\n// development , test and production are pre-defined \r\nif (process.env.NODE_ENV === 'development'){\r\n baseURL = 'http://localhost:4000/api'\r\n}\r\nconst getJobLinks = async () =>{\r\n    const jobLinks = await axios.get(`${baseURL}/joblinks`) \r\n    return jobLinks.data\r\n  }\r\n\r\nexport default {\r\n    getJobLinks\r\n}","import React from 'react';\r\nimport {List} from 'semantic-ui-react';\r\n\r\nconst IndividaulLink = ({link,linkType}) => {\r\n    let icon = null;\r\n    //for more  options in future\r\n    switch (linkType) {\r\n        case \"Live\":\r\n            icon = \"check circle outline\"\r\n            break;\r\n    \r\n        default:\r\n            icon = \"times circle outline\"\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <List.Item style = {{\"lineHeight\": \"1.6em\"}}>\r\n        <List.Icon name={icon} />\r\n        <List.Content style = {{\"lineHeight\": \"1.6em\"}}> \r\n        <details>\r\n            <summary>{link.jobTitle}</summary>\r\n            <a href={link.url}>Link to Job Website </a> <br/>\r\n            <a href={`https://tech.london/discovery/jobs/${link.jobID}`}>Link to Tech London Website </a>\r\n        </details>\r\n        </List.Content>\r\n        </List.Item>\r\n    )\r\n\r\n}\r\n\r\nexport default IndividaulLink;","import React from 'react';\r\nimport {List} from 'semantic-ui-react';\r\nimport IndividaulLink from './IndividualLink';\r\n\r\nconst LinkList = ({ Links: links, linkType }) => {\r\n    let h2style = null;\r\n    //for more  options in future\r\n    switch (linkType) {\r\n        case \"Live\":\r\n            h2style = { \"borderColor\": \"green\" }\r\n            break;\r\n\r\n        default:\r\n            h2style = { \"borderColor\": \"red\" }\r\n            break;\r\n    }\r\n\r\n    if (!(links.length === 0)) {\r\n        return (\r\n            <>\r\n                <h2 style={h2style}>{linkType} Job Links</h2>\r\n                <p className =\"jobsNum\">Total Jobs: {links.length}</p> \r\n                <List>\r\n                    {links.map(link => <IndividaulLink link={link} linkType={linkType} key={link._id} />)}\r\n                </List>\r\n            </>\r\n        )\r\n    }\r\n\r\n    else return (\r\n        <div>\r\n            <h2 style={h2style}>{linkType} Job Links</h2>\r\n            <div>...loading</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LinkList;","import React from 'react';\r\nconst Summary = ({totalJobs}) =>{\r\n\r\n    return(\r\n        <div className =\"summary\">\r\n            <h1>Tech.London Job Search </h1>\r\n            <p className =\"jobsNum\">Total Jobs: { (totalJobs===1)?'...loading':totalJobs //would lead to issues if only one job\r\n             }</p> \r\n            This web app uses puppeteer to web scrape <a href='https://tech.london/discovery/jobs'>Tech.London</a> and find jobs that are still available.\r\n            Jobs were checked using Puppeteer, and said to be dead if the console has any HTTP server errors in the 400 - 599 range. \r\n            This method is <b>not 100% accurate </b> but works for the majority of cases.\r\n            Check out the code <a href = 'https://github.com/IanB13/TechLondonJobs'>here</a>.\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Summary;","import React,{useState,useEffect} from 'react';\nimport APIRequests from './services/APIRequest';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport LinkList from './components/LinkList';\nimport Summary from './components/Summary';\n\nfunction App() {\n  const [jobLinks, changeJobLinks] = useState([{loading:true}]);\n  \n  useEffect(() => {\n    APIRequests.getJobLinks().then(links => {\n      changeJobLinks(links)\n    })\n  }, [])\n\n  const liveLinks = jobLinks.filter(link => link.deadLink === false);\n  const deadLinks = jobLinks.filter(link => link.deadLink === true);\n  const totalJobs = jobLinks.length;\n\n  return (\n    <div className=\"App container\">\n        <Summary totalJobs = {totalJobs} />\n      <div>\n        <LinkList Links ={liveLinks} linkType =\"Live\" />\n      </div>\n      <div>\n        <LinkList Links = {deadLinks} linkType = \"Dead\" />\n      </div>\n    </div>\n  );\n\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}